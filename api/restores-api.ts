/* tslint:disable */
/* eslint-disable */
/**
 * IONOS DBaaS MongoDB REST API
 * With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.   MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { CreateRestoreRequest } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
/**
 * RestoresApi - axios parameter creator
 * @export
 */
export const RestoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Triggers an in-place restore of the given MongoDB cluster.
         * @summary In-place restore of a cluster
         * @param {string} clusterId The unique ID of the cluster.
         * @param {CreateRestoreRequest} createRestoreRequest The restore request to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clustersRestorePost: async (clusterId: string, createRestoreRequest: CreateRestoreRequest, options: any = {}): Promise<RequestArgs> => {
            if (clusterId === null || clusterId === undefined) {
                throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling clustersRestorePost.');
            }
            if (createRestoreRequest === null || createRestoreRequest === undefined) {
                throw new RequiredError('createRestoreRequest','Required parameter createRestoreRequest was null or undefined when calling clustersRestorePost.');
            }
            const localVarPath = `/clusters/{clusterId}/restore`
                .replace(`{${"clusterId"}}`, encodeURIComponent(String(clusterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createRestoreRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createRestoreRequest !== undefined ? createRestoreRequest : {})
                : (createRestoreRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestoresApi - functional programming interface
 * @export
 */
export const RestoresApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Triggers an in-place restore of the given MongoDB cluster.
         * @summary In-place restore of a cluster
         * @param {string} clusterId The unique ID of the cluster.
         * @param {CreateRestoreRequest} createRestoreRequest The restore request to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clustersRestorePost(clusterId: string, createRestoreRequest: CreateRestoreRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await RestoresApiAxiosParamCreator(configuration).clustersRestorePost(clusterId, createRestoreRequest, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * RestoresApi - factory interface
 * @export
 */
export const RestoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Triggers an in-place restore of the given MongoDB cluster.
         * @summary In-place restore of a cluster
         * @param {string} clusterId The unique ID of the cluster.
         * @param {CreateRestoreRequest} createRestoreRequest The restore request to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clustersRestorePost(clusterId: string, createRestoreRequest: CreateRestoreRequest, options?: any): AxiosPromise<void> {
            return RestoresApiFp(configuration).clustersRestorePost(clusterId, createRestoreRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for clustersRestorePost operation in RestoresApi.
 * @export
 * @interface RestoresApiClustersRestorePostRequest
 */
export interface RestoresApiClustersRestorePostRequest {
    /**
     * The unique ID of the cluster.
     * @type {string}
     * @memberof RestoresApiClustersRestorePost
     */
    readonly clusterId: string

    /**
     * The restore request to create.
     * @type {CreateRestoreRequest}
     * @memberof RestoresApiClustersRestorePost
     */
    readonly createRestoreRequest: CreateRestoreRequest
}

/**
 * RestoresApi - object-oriented interface
 * @export
 * @class RestoresApi
 * @extends {BaseAPI}
 */
export class RestoresApi extends BaseAPI {
    /**
     * Triggers an in-place restore of the given MongoDB cluster.
     * @summary In-place restore of a cluster
     * @param {RestoresApiClustersRestorePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestoresApi
     */
    public clustersRestorePost(requestParameters: RestoresApiClustersRestorePostRequest, options?: any) {
        return RestoresApiFp(this.configuration).clustersRestorePost(requestParameters.clusterId, requestParameters.createRestoreRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
